import { VectorStoreService } from './vectorStore';
import { QueryDecomposer } from './queryDecomposer';
import { SubAgentExecutor } from './subAgentExecutor';
import { ResultAggregator } from './resultAggregator';
import type { QueryDecompositionResult } from './queryDecomposer';
import type { SubQueryResult } from './subAgentExecutor';
import type { AggregatedResult } from './resultAggregator';

export interface MasterAgentResponse {
  query: string;
  response: string;
  decomposition: QueryDecompositionResult;
  subResults: SubQueryResult[];
  aggregation: AggregatedResult;
  executionSummary: AggregatedResult['executionSummary'];
  // ‰øùÊåÅÂêëÂêéÂÖºÂÆπ
  analysis: {
    queryType: 'multi_intent' | 'single_intent';
    confidence: number;
    reasoning: string;
  };
  selectedDataset?: string;
  routingReason?: string;
}

export class MasterAgent {
  private queryDecomposer: QueryDecomposer;
  private subAgentExecutor: SubAgentExecutor;
  private resultAggregator: ResultAggregator;

  constructor(vectorStoreService: VectorStoreService) {
    this.queryDecomposer = new QueryDecomposer();
    this.subAgentExecutor = new SubAgentExecutor(vectorStoreService);
    this.resultAggregator = new ResultAggregator();
  }

  /**
   * Â§ÑÁêÜÊü•ËØ¢ÁöÑ‰∏ªÂÖ•Âè£
   */
  async processQuery(query: string): Promise<MasterAgentResponse> {
    try {
      // 1. ÂàÜËß£Êü•ËØ¢
      console.log('üîç ÂºÄÂßãÂàÜËß£Êü•ËØ¢:', query);
      const decomposition = await this.queryDecomposer.decomposeQuery(query);
      console.log('üìã Êü•ËØ¢ÂàÜËß£ÁªìÊûú:', decomposition);

      // 2. ÊâßË°åÂ≠êÊü•ËØ¢
      console.log('‚ö° ÂºÄÂßãÊâßË°åÂ≠êÊü•ËØ¢...');
      const subResults = await this.subAgentExecutor.executeSubQueries(decomposition.subQueries);
      console.log('‚úÖ Â≠êÊü•ËØ¢ÊâßË°åÂÆåÊàê:', subResults);

      // 3. ËÅöÂêàÁªìÊûú
      console.log('üîÑ ÂºÄÂßãËÅöÂêàÁªìÊûú...');
      const aggregation = await this.resultAggregator.aggregateResults(query, subResults);
      console.log('üéØ ÁªìÊûúËÅöÂêàÂÆåÊàê:', aggregation);

      // 4. ÊûÑÈÄ†ÂêëÂêéÂÖºÂÆπÁöÑÂàÜÊûêÁªìÊûú
      const analysis = {
        queryType: decomposition.hasMultipleIntents ? ('multi_intent' as const) : ('single_intent' as const),
        confidence: this.calculateOverallConfidence(decomposition.subQueries),
        reasoning: decomposition.reasoning,
      };

      // 5. ÊèêÂèñÈÄâ‰∏≠ÁöÑÊï∞ÊçÆÈõÜ‰ø°ÊÅØÔºàÁî®‰∫éÂêëÂêéÂÖºÂÆπÔºâ
      const knowledgeQueries = subResults.filter(r => r.type === 'knowledge_query' && r.success);
      const selectedDataset = knowledgeQueries.length > 0 ? 'Êô∫ËÉΩË∑ØÁî±ÈÄâÊã©' : undefined;
      const routingReason = knowledgeQueries.length > 0 ? 'ÈÄöËøáÊü•ËØ¢ÂàÜËß£ÂíåÊô∫ËÉΩË∑ØÁî±ÈÄâÊã©' : undefined;

      return {
        query,
        response: aggregation.finalResponse,
        decomposition,
        subResults,
        aggregation,
        executionSummary: aggregation.executionSummary,
        analysis,
        selectedDataset,
        routingReason,
      };
    } catch (error) {
      console.error('‚ùå MasterAgentÂ§ÑÁêÜÊü•ËØ¢Â§±Ë¥•:', error);

      // ÈîôËØØÂ§ÑÁêÜÔºöËøîÂõûÈîôËØØ‰ø°ÊÅØ
      const errorResponse = `‚ùå Êü•ËØ¢Â§ÑÁêÜÂ§±Ë¥•: ${error instanceof Error ? error.message : 'Êú™Áü•ÈîôËØØ'}`;

      return {
        query,
        response: errorResponse,
        decomposition: {
          originalQuery: query,
          subQueries: [],
          hasMultipleIntents: false,
          reasoning: 'Êü•ËØ¢Â§ÑÁêÜÂ§±Ë¥•',
        },
        subResults: [],
        aggregation: {
          originalQuery: query,
          finalResponse: errorResponse,
          subResults: [],
          aggregationReasoning: 'Êü•ËØ¢Â§ÑÁêÜÂ§±Ë¥•',
          executionSummary: {
            totalSubQueries: 0,
            successfulQueries: 0,
            failedQueries: 0,
            totalExecutionTime: 0,
          },
        },
        executionSummary: {
          totalSubQueries: 0,
          successfulQueries: 0,
          failedQueries: 0,
          totalExecutionTime: 0,
        },
        analysis: {
          queryType: 'single_intent',
          confidence: 0,
          reasoning: 'Êü•ËØ¢Â§ÑÁêÜÂ§±Ë¥•',
        },
        selectedDataset: undefined,
        routingReason: undefined,
      };
    }
  }

  /**
   * ËÆ°ÁÆóÊï¥‰ΩìÁΩÆ‰ø°Â∫¶
   */
  private calculateOverallConfidence(subQueries: any[]): number {
    if (subQueries.length === 0) return 0;

    const totalConfidence = subQueries.reduce((sum, sq) => sum + sq.confidence, 0);
    return totalConfidence / subQueries.length;
  }
}
